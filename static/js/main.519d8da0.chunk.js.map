{"version":3,"sources":["Recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","responce","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mNCkB3CC,EAhBC,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAMC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACvC,OACC,yBAAKC,UAAWC,IAAMC,QACrB,gCAAON,EAAP,KACA,4BACCG,EAAYI,KAAI,SAAAC,GAAU,OAC1B,gCAAMA,EAAWC,KAAjB,SAID,+BAAKR,EAAL,KACA,yBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,OC+CjCC,EAzDH,WACZ,IADkB,EAKWC,mBAAS,IALpB,mBAKXC,EALW,KAKFC,EALE,OAMUF,mBAAS,IANnB,mBAMXG,EANW,KAMHC,EANG,OAOQJ,mBAAS,WAPjB,mBAOXK,EAPW,KAOJC,EAPI,KASlBC,qBAAW,WACXC,MACI,CAACH,IAEL,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEAEhBC,MAAM,mCAAD,OAAoCL,EAApC,mBAdQ,WAcR,oBAbS,qCAWE,cACVM,EADU,gBAKGA,EAASC,OALZ,OAKVC,EALU,OAMhBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAPD,2CAAH,qDAsBf,OACE,yBAAKvB,UAAU,OACf,0BAAMA,UAAU,cAAc0B,SARd,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAMR,2BAAOb,UAAU,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SAdxC,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAcjB,4BAAQ9B,UAAU,gBAAgB6B,KAAK,UAAvC,aAIF,yBAAK7B,UAAU,SACdU,EAAQP,KAAI,SAAAD,GAAM,OACjB,kBAAC,EAAD,CACA+B,IAAK/B,EAAOA,OAAOgC,MACnBtC,MAAOM,EAAOA,OAAOgC,MACrBrC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACnBC,YAAaG,EAAOA,OAAOH,oBC1CboC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.519d8da0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__l68B3\",\"image\":\"Recipe_image__ZT9Jq\"};","import React from 'react';\r\nimport style from \"./Recipe.module.css\"\r\n\r\nconst Recipe  = ({title,calories,image, ingredients}) => {\r\n\treturn (\r\n\t\t<div className={style.recipe}>\r\n\t\t\t<h1 > {title} </h1>\r\n\t\t\t<ol>\r\n\t\t\t{ingredients.map(ingredient => (\r\n\t\t\t\t<li> {ingredient.text} </li>\r\n\t\t\t\t))}\r\n\r\n\t\t\t</ol>\r\n\t\t\t<p> {calories} </p>\r\n\t\t\t<img className={style.image} src={image} alt=\"\"/>\r\n\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default Recipe;"," import React,{useEffect, useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\nconst App = () => {\nconst App_id = '8b4688f3';\nconst App_key = '1890645a21caa81730b51b96e8d7ff68';\n\n\nconst [recipes, setRecipes]= useState([]);\nconst [search, setSearch] = useState('');\nconst [query, setQuery] = useState('chicken');\n\nuseEffect( () => {\ngetRecipe(); \n }, [query]);\n\nconst getRecipe = async () => {\n  const responce = await (\n  fetch(`https://api.edamam.com/search?q=${query}&app_id=${App_id}&app_key=${App_key}`)\n  );\n\n  const data = await responce.json(); \n  setRecipes(data.hits);\n  console.log(data.hits);  \n};\n\n\nconst updateSearch = e => {\n  setSearch(e.target.value);\n  \n};\n\nconst getSearch = e => {\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\nreturn (\n  <div className=\"App\"> \n  <form className=\"search-form\" onSubmit={getSearch}>\n    <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n    <button className=\"search-button\" type=\"submit\"> Search </button>\n\n  </form>\n\n  <div className='items'>\n  {recipes.map(recipe => (\n    <Recipe \n    key={recipe.recipe.label}\n    title={recipe.recipe.label}\n    calories={recipe.recipe.calories}\n    image={recipe.recipe.image}\n      ingredients={recipe.recipe.ingredients}\n    />\n    ))}\n  </div>\n  </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}